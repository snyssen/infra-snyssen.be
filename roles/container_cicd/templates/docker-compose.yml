version: '3'
services:

  drone_postgres:
    image: postgres:14
    container_name: drone_postgres
    restart: always
    networks:
      - internal
    environment:
      - POSTGRES_USER=drone
      - POSTGRES_PASSWORD={{ cicd__postgres__password }}
      - POSTGRES_DB=drone
    volumes:
      - "{{ docker_mounts_directory }}/drone/postgresql:/var/lib/postgresql/data"

  drone_postgres_backups:
    restart: always
    image: prodrigestivill/postgres-backup-local:15-alpine
    container_name: drone_postgres_backups
    networks:
      - internal
    depends_on:
      - drone_postgres
    environment:
      - POSTGRES_HOST=drone_postgres
      - POSTGRES_DB=drone
      - POSTGRES_USER=drone
      - POSTGRES_PASSWORD={{ cicd__postgres__password }}
      - POSTGRES_EXTRA_OPTS=--format c # So we can use pg_restore to restore the database
      - TZ=Europe/Brussels
      - HEALTHCHECK_ID={{ cicd__postgres__backups_healthcheck_id }}
    volumes:
      - /mnt/storage/backups/drone:/backups
      - ./hooks:/hooks

  drone:
    image: drone/drone:2
    container_name: drone
    restart: unless-stopped
    networks:
      - internal
      - web
    depends_on:
      - drone_postgres
    environment:
      - DRONE_GITEA_SERVER=https://git.{{ ansible_fqdn }}
      - DRONE_GITEA_CLIENT_ID={{ cicd__drone__gitea_client_id }}
      - DRONE_GITEA_CLIENT_SECRET={{ cicd__drone__gitea_client_secret }}
      - DRONE_RPC_SECRET={{ cicd__rpc_secret }}
      - DRONE_SERVER_HOST=drone.{{ ansible_fqdn }}
      - DRONE_SERVER_PROTO=https
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://drone:{{ cicd__postgres__password }}@drone_postgres:5432/drone?sslmode=disable
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.http.routers.drone.entryPoints=websecure
      - traefik.http.routers.drone.rule=Host(`drone.{{ ansible_fqdn }}`)
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  drone-runner:
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_PROTO=https
      - DRONE_RPC_HOST=drone.{{ ansible_fqdn }}
      - DRONE_RPC_SECRET={{ cicd__rpc_secret }}
      - DRONE_RUNNER_CAPACITY=6
      - DRONE_RUNNER_NAME=drone-runner
      - DRONE_UI_USERNAME={{ cicd__runner__username }}
      - DRONE_UI_PASSWORD={{ cicd__runner__password }}
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.drone-runner.entryPoints=drone-runner
      - traefik.tcp.routers.drone-runner.rule=HostSNI(`*`)
      - traefik.tcp.services.drone-runner.loadBalancer.server.port=3000

networks:
  web:
    external: true
  internal:
