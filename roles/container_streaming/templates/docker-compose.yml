version: "3"
services:
  jellyfin:
    image: jellyfin/jellyfin
    restart: unless-stopped
    container_name: jellyfin
    networks:
      - web
    user: 1000:1000
    environment:
      - JELLYFIN_DATA_DIR=/data
      - JELLYFIN_CONFIG_DIR=/config
      - JELLYFIN_CACHE_DIR=/cache
      - JELLYFIN_LOG_DIR=/logs

      - JELLYFIN_PublishedServerUrl=streaming.{{ ansible_fqdn }}
      - JELLYFIN_playlists__allowDuplicates=false
    ports:
      - 7359:7359/udp # clients discovery
      - 1900:1900/udp # DLNA
    # network_mode: "host" # For DLNA, but unfortunately incompatible with "networks" statement, which is necessary for use with Traefik
    devices:
      - /dev/dri:/dev/dri # allow use of Intel QuickSync for transcoding
    group_add:
      - 105 # Adds render group
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.entryPoints=websecure
      - traefik.http.routers.jellyfin.rule=Host(`streaming.{{ ansible_fqdn }}`)
      - traefik.http.services.jellyfin.loadBalancer.server.port=8096
      # jellyfin middleware, see https://jellyfin.org/docs/general/networking/traefik2.html
      - traefik.http.routers.jellyfin.middlewares=jellyfin-mw
      - traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      - traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect=true
      - traefik.http.middlewares.jellyfin-mw.headers.SSLHost=streaming.{{ ansible_fqdn }}
      - traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost=true
      - traefik.http.middlewares.jellyfin-mw.headers.STSSeconds=315360000
      - traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.jellyfin-mw.headers.STSPreload=true
      - traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader=true
      - traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true
      - traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true
      - traefik.http.middlewares.jellyfin-mw.headers.browserXSSFilter=true
      - traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from https://streaming.{{ ansible_fqdn }}'
    volumes:
      - "{{ docker_mounts_directory }}/jellyfin/data:/data"
      - "{{ docker_mounts_directory }}/jellyfin/config:/config"
      - "{{ docker_mounts_directory }}/jellyfin/cache:/cache"
      - "{{ docker_mounts_directory }}/jellyfin/logs:/logs"
      # all below refer to media folders
      - /mnt/storage/streaming/media:/data/media

  torrent:
    image: markusmcnugen/qbittorrentvpn
    restart: unless-stopped
    container_name: torrent
    environment:
      - VPN_ENABLED=yes
      - LAN_NETWORK=192.168.1.0/24
      - NAME_SERVERS={{ dns_servers | join(',') }}
      - PUID=1000
      - PGID=1000
      - INCOMING_PORT_ENV=54783
    networks:
      - web
    ports:
      - 54783:54783
      - 54783:54783/udp
    labels:
      - traefik.enable=true
      - traefik.http.routers.torrent.entryPoints=websecure
      - traefik.http.routers.torrent.rule=Host(`torrent.{{ ansible_fqdn }}`)
      - traefik.http.services.torrent.loadBalancer.server.port=8080
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - /mnt/storage/torrent/config:/config # For easy backup
      - /mnt/storage/streaming/torrent:/data/torrent

  usenet:
    image: jshridha/docker-nzbgetvpn:21.1
    container_name: usenet
    restart: unless-stopped
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.usenet.entryPoints=websecure
      - traefik.http.routers.usenet.rule=Host(`usenet.{{ ansible_fqdn }}`)
      - traefik.http.services.usenet.loadBalancer.server.port=6789
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - PGID=1000
      - PUID=1000
      - VPN_PROV=custom
      - LAN_NETWORK=192.168.1.0/24
      - NAME_SERVERS={{ dns_servers | join(',') }}
      - VPN_ENABLED=yes
    volumes:
      - /mnt/storage/usenet/config:/config
      - /mnt/storage/streaming/usenet:/data/usenet

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.entryPoints=websecure
      - traefik.http.routers.sonarr.rule=Host(`sonarr.{{ ansible_fqdn }}`)
      - traefik.http.services.sonarr.loadBalancer.server.port=8989
    volumes:
      - "{{ docker_mounts_directory }}/sonarr/config:/config"
      - /mnt/storage/streaming:/data
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID={{ ansible_user_uid }}
      - PGID={{ ansible_user_uid }}
      - TZ=Europe/Brussels
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.entryPoints=websecure
      - traefik.http.routers.radarr.rule=Host(`radarr.{{ ansible_fqdn }}`)
      - traefik.http.services.radarr.loadBalancer.server.port=7878
    volumes:
      - "{{ docker_mounts_directory }}/radarr/config:/config"
      - /mnt/storage/streaming:/data
    restart: unless-stopped

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID={{ ansible_user_uid }}
      - PGID={{ ansible_user_uid }}
      - TZ=Europe/Brussels
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.entryPoints=websecure
      - traefik.http.routers.lidarr.rule=Host(`lidarr.{{ ansible_fqdn }}`)
      - traefik.http.services.lidarr.loadBalancer.server.port=8686
    volumes:
      - "{{ docker_mounts_directory }}/lidarr/config:/config"
      - /mnt/storage/streaming:/data
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID={{ ansible_user_uid }}
      - PGID={{ ansible_user_uid }}
      - TZ=Europe/Brussels
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.entryPoints=websecure
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ ansible_fqdn }}`)
      - traefik.http.services.prowlarr.loadBalancer.server.port=9696
    volumes:
      - "{{ docker_mounts_directory }}/prowlarr/config:/config"
    restart: unless-stopped

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID={{ ansible_user_uid }}
      - PGID={{ ansible_user_uid }}
      - TZ=Europe/Brussels
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.entryPoints=websecure
      - traefik.http.routers.bazarr.rule=Host(`bazarr.{{ ansible_fqdn }}`)
      - traefik.http.services.bazarr.loadBalancer.server.port=6767
    volumes:
      - "{{ docker_mounts_directory }}/bazarr/config:/config"
      - /mnt/storage/streaming:/data
    restart: unless-stopped

  invidious_postgres:
    image: docker.io/library/postgres:14
    container_name: invidious_postgres
    restart: unless-stopped
    networks:
      - internal
    environment:
      POSTGRES_DB: invidious
      POSTGRES_USER: kemal # Unfortunately it cannot be changed for now...
      POSTGRES_PASSWORD: "{{ invidious__postgres_password }}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    volumes:
      - "{{ docker_mounts_directory }}/invidious/postgresql:/var/lib/postgresql/data"
      - ./sql:/config/sql
      - ./init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh

  invidious_postgres_backups:
    image: prodrigestivill/postgres-backup-local
    container_name: invidious_postgres_backups
    restart: unless-stopped
    depends_on:
      - invidious_postgres
    networks:
      - internal
    environment:
      - POSTGRES_HOST=invidious_postgres
      - POSTGRES_DB=invidious
      - POSTGRES_USER=kemal
      - POSTGRES_PASSWORD={{ invidious__postgres_password }}
      - POSTGRES_EXTRA_OPTS=--format c # So we can use pg_restore to restore the database
      - TZ=Europe/Brussels
      - HEALTHCHECK_PORT=8080 # TODO: Creates cronjob that pings this and reports result to healthchecks.io
    volumes:
      - /mnt/storage/backups/invidious:/backups

  invidious:
    image: quay.io/invidious/invidious:latest
    container_name: invidious
    restart: unless-stopped
    networks:
      - internal
      - web
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.http.services.invidious.loadBalancer.server.port=3000
    # LAN traffic does not require authentication
      - traefik.http.routers.invidious-lan.entryPoints=websecure
      - traefik.http.routers.invidious-lan.rule=Host(`yt.{{ ansible_fqdn }}`) && ClientIP(`192.168.1.0/24`) # This rule will have priority since it is longer
      - traefik.http.routers.invidious-lan.service=invidious

    # While WAN traffic does
      - traefik.http.routers.invidious-wan.entryPoints=websecure
      - traefik.http.routers.invidious-wan.rule=Host(`yt.{{ ansible_fqdn }}`)
      - traefik.http.routers.invidious-wan.service=invidious
      - traefik.http.routers.invidious-wan.middlewares=auth # TODO: Replace with SSO
    environment:
      # Please read the following file for a comprehensive list of all available
      # configuration options and their associated syntax:
      # https://github.com/iv-org/invidious/blob/master/config/config.example.yml
      INVIDIOUS_CONFIG: |
        db:
          dbname: invidious
          user: kemal
          password: {{ invidious__postgres_password }}
          host: invidious_postgres
          port: 5432
        check_tables: true
        domain: yt.{{ ansible_fqdn }}
        https_only: false
        use_quic: true
        captcha_enabled: false
        admins: ["{{ invidious__admin_username }}"]
        default_user_preferences:
          region: {{ invidious__region }}
          dark_mode: true
          default_home: Subscriptions
          annotations: true
          annotations_subscribed: true
          autoplay: true
          autoplay: true
          continue_autoplay: false
          quality: dash

    ports:
      - "127.0.0.1:3000:3000"
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/comments/jNQXAC9IVRw || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    depends_on:
      - invidious_postgres

networks:
  web:
    external: true
  internal:
