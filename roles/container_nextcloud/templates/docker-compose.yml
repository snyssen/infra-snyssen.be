version: "3"
services:
  nextcloud_postgres:
    restart: unless-stopped
    image: postgres:16
    container_name: nextcloud_postgres
    networks:
      - internal
    environment:
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD={{ nextcloud__postgres_password }}
      - POSTGRES_DB=nextcloud
    volumes:
      - "{{ docker_mounts_directory }}/nextcloud/postgresql:/var/lib/postgresql/data"

  nextcloud_postgres_backups:
    restart: unless-stopped
    image: prodrigestivill/postgres-backup-local:16-alpine
    container_name: nextcloud_postgres_backups
    networks:
      - internal
    depends_on:
      - nextcloud_postgres
    environment:
      - POSTGRES_HOST=nextcloud_postgres
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD={{ nextcloud__postgres_password }}
      - POSTGRES_EXTRA_OPTS=--format c # So we can use pg_restore to restore the database
      - TZ=Europe/Brussels
      - HEALTHCHECK_ID={{ nextcloud__postgres_backups_healthcheck_id }}
    volumes:
      - /mnt/storage/backups/nextcloud:/backups
      - ./hooks:/hooks

  nextcloud_redis:
    image: redis:latest
    container_name: nextcloud_redis
    restart: always
    networks:
      - internal

  nextcloud:
    image: nextcloud:28
    container_name: nextcloud
    restart: unless-stopped
    networks:
      - internal
      - web
    depends_on:
      - nextcloud_postgres
      - nextcloud_redis
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.http.routers.nextcloud.entryPoints=websecure
      - traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud_redirect
      - traefik.http.routers.nextcloud.rule=Host(`cloud.{{ ansible_fqdn }}`)
      - traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=ALLOW-FROM https://cloud.{{ ansible_fqdn }}
      - traefik.http.middlewares.nextcloud.headers.contentSecurityPolicy=frame-ancestors 'self' cloud.{{ ansible_fqdn }}
      - traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011
      - traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.nextcloud.headers.stsPreload=true
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.regex=/.well-known/(card|cal)dav
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.replacement=/remote.php/dav/
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD={{ nextcloud__postgres_password }}
      - POSTGRES_HOST=nextcloud_postgres
      - NEXTCLOUD_ADMIN_USER={{ nextcloud__nextcloud_admin }}
      - NEXTCLOUD_ADMIN_PASSWORD={{ nextcloud__nextcloud_password }}
      - REDIS_HOST=nextcloud_redis
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.{{ ansible_fqdn }}
      - OVERWRITEPROTOCOL=https
    volumes:
      - /mnt/storage/nextcloud:/var/www/html
      - /mnt/storage/pictures:/pictures
      - /mnt/storage/paperless:/paperless

  nextcloud_monitor:
    image: xperimental/nextcloud-exporter:0.6.2
    container_name: nextcloud_monitor
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - nextcloud
    environment:
      - NEXTCLOUD_SERVER=https://cloud.{{ ansible_fqdn }}
      - NEXTCLOUD_AUTH_TOKEN={{ nextcloud__monitor_token }}

networks:
  monitoring:
    external: true
  web:
    external: true
  internal:
