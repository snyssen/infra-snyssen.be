version: "3"
services:

  piped_postgres:
    image: postgres:14
    container_name: piped_postgres
    restart: unless-stopped
    networks:
      - internal
    environment:
      - POSTGRES_USER=piped
      - POSTGRES_PASSWORD={{ piped__postgres_password }}
      - POSTGRES_DB=piped
    volumes:
      - "{{ docker_mounts_directory }}/piped/postgresql:/var/lib/postgresql/data"

  piped_postgres_backups:
    restart: unless-stopped
    image: prodrigestivill/postgres-backup-local:16-alpine
    container_name: piped_postgres_backups
    networks:
      - internal
    depends_on:
      - piped_postgres
    environment:
      - POSTGRES_HOST=piped_postgres
      - POSTGRES_DB=piped
      - POSTGRES_USER=piped
      - POSTGRES_PASSWORD={{ piped__postgres_password }}
      - POSTGRES_EXTRA_OPTS=--format c # So we can use pg_restore to restore the database
      - TZ=Europe/Brussels
      - HEALTHCHECK_ID={{ piped__postgres_backups_healthcheck_id }}
    volumes:
      - /mnt/storage/backups/piped:/backups
      - ./hooks:/hooks

  piped_proxy_nginx:
    image: nginx:mainline-alpine
    container_name: piped_proxy_nginx
    restart: unless-stopped
    networks:
      - web
    volumes:
      - /mnt/storage/piped/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /mnt/storage/piped/nginx/pipedproxy.conf:/etc/nginx/conf.d/pipedproxy.conf:ro
      - /mnt/storage/piped/nginx/ytproxy.conf:/etc/nginx/snippets/ytproxy.conf:ro
      - "{{ docker_mounts_directory }}/piped/proxy:/var/run/ytproxy"
    depends_on:
      - piped_api
      - piped_proxy
      - piped_frontend
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.piped_proxy.entrypoints=websecure"
      - "traefik.http.routers.piped_proxy.rule=Host(`proxy-yt.{{ ansible_fqdn }}`)"
      - "traefik.http.routers.piped_proxy.service=piped_proxy"
      - "traefik.http.services.piped_proxy.loadbalancer.server.port=80"

  piped_proxy:
    image: 1337kavin/ytproxy
    container_name: piped_proxy
    user: "{{ ansible_user_uid}}:{{ ansible_user_gid }}"
    networks:
      - internal
    volumes:
      - "{{ docker_mounts_directory }}/piped/proxy:/app/socket"
    restart: unless-stopped

  piped_api:
    image: 1337kavin/piped
    container_name: piped_api
    depends_on:
      - piped_postgres
      - piped_proxy
    networks:
      - web
      - internal
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.http.routers.piped_api.entryPoints=websecure
      - traefik.http.routers.piped_api.rule=Host(`api-yt.{{ ansible_fqdn }}`)
      - traefik.http.services.piped_api.loadBalancer.server.port=8080
    volumes:
      - /mnt/storage/piped/config.properties:/app/config.properties:ro
    restart: unless-stopped

  piped_frontend:
    image: 1337kavin/piped-frontend
    container_name: piped_frontend
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.piped_frontend.entryPoints=websecure
      - traefik.http.routers.piped_frontend.rule=Host(`yt.{{ ansible_fqdn }}`)
    entrypoint: ash -c 'sed -i s/pipedapi.kavin.rocks/api-yt.{{ ansible_fqdn }}/g /usr/share/nginx/html/assets/* && /docker-entrypoint.sh && nginx -g "daemon off;"'
    restart: unless-stopped

networks:
  web:
    external: true
  internal:
