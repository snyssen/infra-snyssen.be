- ansible.builtin.set_fact:
    db_restore_available:
      # TODO: 'user' and 'database' should have same value as service (the key here) and could thus be removed from here
      nextcloud:
        directory: /mnt/storage/backups/nextcloud
        type: pgsql
        user: nextcloud
        password: "{{ nextcloud__postgres_password }}"
        database: nextcloud
      piped:
        directory: /mnt/storage/backups/piped
        type: pgsql
        user: piped
        password: "{{ piped__postgres_password }}"
        database: piped
      recipes:
        directory: /mnt/storage/backups/recipes
        type: pgsql
        user: djangouser
        password: "{{ recipes__db_password }}"
        database: djangodb
      photoprism:
        directory: /mnt/storage/backups/photoprism/mysql
        type: photoprism
      gitea:
        directory: /mnt/storage/backups/gitea
        type: pgsql
        user: gitea
        password: "{{ git__postgres_password }}"
        database: gitea
      drone:
        directory: /mnt/storage/backups/drone
        type: pgsql
        user: drone
        password: "{{ cicd__postgres__password }}"
        database: drone
      paperless:
        directory: /mnt/storage/backups/paperless
        type: pgsql
        user: paperless
        password: "{{ paperless__postgres_password }}"
        database: paperless

- ansible.builtin.set_fact:
    db_restore_selected: >-
      {{
        db_restore_available | dict2items | selectattr('key', 'in', db_restore_include) | list | items2dict
        if db_restore_include is defined and db_restore_include | length > 0 else
        db_restore_available | dict2items | rejectattr('key', 'in', db_restore_exclude) | list | items2dict
      }}

- ansible.builtin.include_tasks: restore_individual_db.yml
  loop: "{{ db_restore_selected | dict2items }}"
  loop_control:
    loop_var: db_restore_selected_individual
