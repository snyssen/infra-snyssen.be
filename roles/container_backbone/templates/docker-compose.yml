version: "3"
services:
  reverse-proxy:
    image: traefik
    restart: always
    container_name: traefik
    networks:
      - web
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--accesslog=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      - "--entryPoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      - "--entryPoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=le"
      {% if backbone__acme_dns_challenge__enabled %}

      - "--entrypoints.websecure.http.tls.domains[0].main={{ ansible_fqdn }}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.{{ ansible_fqdn }}"
      {% endif %}


      - "--entryPoints.minecraft.address=:25565"
      - "--entryPoints.drone-runner.address=:3000"
      - "--entryPoints.jellyfin-discovery.address=:7359/udp"
      - "--entryPoints.dlna.address=:1900/udp"

      - "--certificatesResolvers.le.acme.email={{ smtp__to }}"
      - "--certificatesResolvers.le.acme.storage=acme.json"
      - "--certificatesresolvers.le.acme.caserver={{ backbone__acme_ca_server }}"
      - "--certificatesResolvers.le.acme.tlsChallenge=false"
      - "--certificatesresolvers.le.acme.dnschallenge={{ backbone__acme_dns_challenge__enabled | to_json }}"
      - "--certificatesresolvers.le.acme.dnschallenge.provider={{ backbone__acme_dns_challenge__provider }}"
      - "--certificatesresolvers.le.acme.dnschallenge.delaybeforecheck=30"
      - "--certificatesResolvers.le.acme.httpChallenge={{ backbone__acme_http_challenge__enabled | to_json }}"
      - "--certificatesResolvers.le.acme.httpChallenge.entryPoint=web"
    environment:
      - "{{ backbone__acme_dns_challenge__api_key_variable }}={{ backbone__acme_dns_challenge__api_key }}"
    ports:
      - 80:80 # HTTP
      - 443:443 # HTTPS
      - 25565:25565 # Minecraft
      - 3000:3000 # Drone runner
      - 7359:7359/udp # Jellyfin client discovery
      - 1900:1900/udp # DLNA (for Jellyfin)
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # certificates storage
      - "{{ docker_mounts_directory }}/traefik/acme.json:/acme.json"
    labels:
      # allow access to traefik UI
      - traefik.enable=true
      - traefik.http.routers.traefik.entryPoints=websecure
      - traefik.http.routers.traefik.rule=Host(`routing.{{ ansible_fqdn }}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASH_USERS}

      # Adds the compress middleware so its available to all containers that may need it
      - traefik.http.routers.traefik.middlewares=traefik-compress
      - traefik.http.middlewares.traefik-compress.compress=true

networks:
  web:
    external: true
