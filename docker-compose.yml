version: '3'
services:

  reverse-proxy:
    image: traefik:v2.3
    restart: always
    container_name: traefik
    networks:
      - web
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesResolvers.le.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesResolvers.le.acme.storage=acme.json"
      - "--certificatesResolvers.le.acme.tlsChallenge=true"
      - "--certificatesResolvers.le.acme.httpChallenge=true"
      - "--certificatesResolvers.le.acme.httpChallenge.entryPoint=web"
    ports:
      - 80:80
      - 443:443
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # certificates storage
      - ${DOCKER_DIRECTORY}/traefik/acme.json:/acme.json
    labels:
      # Redirect all HTTP to HTTPS permanently
      - traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)
      - traefik.http.routers.http_catchall.entrypoints=web
      - traefik.http.routers.http_catchall.middlewares=https_redirect
      - traefik.http.middlewares.https_redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https_redirect.redirectscheme.permanent=true
      # allow access to traefik UI
      - traefik.enable=true
      - traefik.http.routers.api.entryPoints=websecure
      - traefik.http.routers.api.rule=Host(`routing.snyssen.be`)
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_HTPASSWORD}
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=le
      
  portainer:
    image: portainer/portainer
    container_name: portainer
    restart: always
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.entryPoints=websecure
      - traefik.http.routers.portainer.rule=Host(`docker.snyssen.be`)
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=le
    volumes:
      - ${DOCKER_DIRECTORY}/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
      
  streaming:
    image: linuxserver/jellyfin
    restart: unless-stopped
    container_name: jellyfin
    networks:
      - web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Brussels
    ports:
      - 7359:7359/udp # clients discovery
      - 1900:1900/udp # DLNA
    devices:
      - /dev/dri:/dev/dri # allow use of Intel QuickSync for transcoding
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.entryPoints=websecure
      - traefik.http.routers.jellyfin.rule=Host(`streaming.snyssen.be`)
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=le
      - traefik.http.services.jellyfin.loadBalancer.server.port=8096
      # jellyfin middleware, see https://jellyfin.org/docs/general/networking/traefik2.html
      - traefik.http.routers.jellyfin.middlewares=jellyfin-mw
      - traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      - traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect=true
      - traefik.http.middlewares.jellyfin-mw.headers.SSLHost=streaming.snyssen.be
      - traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost=true
      - traefik.http.middlewares.jellyfin-mw.headers.STSSeconds=315360000
      - traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.jellyfin-mw.headers.STSPreload=true
      - traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader=true
      - traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true
      - traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true
      - traefik.http.middlewares.jellyfin-mw.headers.browserXSSFilter=true
      - traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from https://streaming.snyssen.be'
    volumes:
      - ${DOCKER_DIRECTORY}/jellyfin/config:/config
      - ${DOCKER_DIRECTORY}/jellyfin/cache:/cache
      # all below refer to media folders
      - /mnt/storage/series:/series
      
  db:
    restart: always
    image: postgres:11
    container_name: postgres
    networks:
      - internal
    environment:
    - POSTGRES_USER=nextcloud
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_DB=nextcloud
    volumes:
    - ${DOCKER_DIRECTORY}/postgresql:/var/lib/postgresql/data
  
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - internal
    volumes:
      - ${DOCKER_DIRECTORY}/redis:/var/lib/redis

  nextcloud:
    image: nextcloud:stable
    container_name: nextcloud
    restart: always
    networks:
      - internal
      - web
    depends_on:
      - redis
      - db
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.http.routers.nextcloud.entryPoints=websecure
      - traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud_redirect
      - traefik.http.routers.nextcloud.tls.certresolver=le
      - traefik.http.routers.nextcloud.rule=Host(`cloud.snyssen.be`)
      - traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=ALLOW-FROM https://cloud.snyssen.be
      - traefik.http.middlewares.nextcloud.headers.contentSecurityPolicy=frame-ancestors 'self' cloud.snyssen.be
      - traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011
      - traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.nextcloud.headers.stsPreload=true
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.regex=/.well-known/(card|cal)dav
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.replacement=/remote.php/dav/
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_PASSWORD}
      - REDIS_HOST=redis
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.snyssen.be
      #- TRUSTED_PROXIES=172.18.0.0/16
      - OVERWRITEPROTOCOL=https
    volumes:
      - /mnt/storage/nextcloud:/var/www/html

networks:
  web:
    external: true
  internal:
