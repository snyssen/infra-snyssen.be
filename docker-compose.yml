version: '3'
services:

  reverse-proxy:
    image: traefik:v2.3
    restart: always
    container_name: traefik
    networks:
      - web
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesResolvers.le.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesResolvers.le.acme.storage=acme.json"
      - "--certificatesResolvers.le.acme.tlsChallenge=true"
      - "--certificatesResolvers.le.acme.httpChallenge=true"
      - "--certificatesResolvers.le.acme.httpChallenge.entryPoint=web"
    ports:
      - 80:80
      - 443:443
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # certificates storage
      - ${DOCKER_DIRECTORY}/traefik/acme.json:/acme.json
    labels:
      # Redirect all HTTP to HTTPS permanently
      - traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)
      - traefik.http.routers.http_catchall.entrypoints=web
      - traefik.http.routers.http_catchall.middlewares=https_redirect
      - traefik.http.middlewares.https_redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https_redirect.redirectscheme.permanent=true
      # allow access to traefik UI
      - traefik.enable=true
      - traefik.http.routers.api.entryPoints=websecure
      - traefik.http.routers.api.rule=Host(`routing.snyssen.be`)
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_HTPASSWORD}
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=le
      
  portainer:
    image: portainer/portainer
    container_name: portainer
    restart: always
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.entryPoints=websecure
      - traefik.http.routers.portainer.rule=Host(`docker.snyssen.be`)
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=le
    volumes:
      - ${DOCKER_DIRECTORY}/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
      
  streaming:
    image: linuxserver/jellyfin
    restart: unless-stopped
    container_name: jellyfin
    networks:
      - web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Brussels
    ports:
      - 7359:7359/udp # clients discovery
      - 1900:1900/udp # DLNA
    devices:
      - /dev/dri:/dev/dri # allow use of Intel QuickSync for transcoding
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.entryPoints=websecure
      - traefik.http.routers.jellyfin.rule=Host(`streaming.snyssen.be`)
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=le
      - traefik.http.services.jellyfin.loadBalancer.server.port=8096
      # jellyfin middleware, see https://jellyfin.org/docs/general/networking/traefik2.html
      - traefik.http.routers.jellyfin.middlewares=jellyfin-mw
      - traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      - traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect=true
      - traefik.http.middlewares.jellyfin-mw.headers.SSLHost=streaming.snyssen.be
      - traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost=true
      - traefik.http.middlewares.jellyfin-mw.headers.STSSeconds=315360000
      - traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.jellyfin-mw.headers.STSPreload=true
      - traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader=true
      - traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true
      - traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true
      - traefik.http.middlewares.jellyfin-mw.headers.browserXSSFilter=true
      - traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from https://streaming.snyssen.be'
    volumes:
      - ${DOCKER_DIRECTORY}/jellyfin/config:/config
      - ${DOCKER_DIRECTORY}/jellyfin/cache:/cache
      # all below refer to media folders
      - /mnt/storage/TV_shows:/TV_shows
      - /mnt/storage/movies:/movies
      - /mnt/storage/music:/music
      
  db:
    restart: always
    image: postgres:11
    container_name: postgres
    networks:
      - internal
    environment:
    - POSTGRES_USER=nextcloud
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_DB=nextcloud
    volumes:
    - ${DOCKER_DIRECTORY}/postgresql:/var/lib/postgresql/data
  
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - internal
    volumes:
      - ${DOCKER_DIRECTORY}/redis:/var/lib/redis

  nextcloud:
    image: nextcloud:stable
    container_name: nextcloud
    restart: always
    networks:
      - internal
      - web
    depends_on:
      - redis
      - db
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.http.routers.nextcloud.entryPoints=websecure
      - traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud_redirect
      - traefik.http.routers.nextcloud.tls.certresolver=le
      - traefik.http.routers.nextcloud.rule=Host(`cloud.snyssen.be`)
      - traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=ALLOW-FROM https://cloud.snyssen.be
      - traefik.http.middlewares.nextcloud.headers.contentSecurityPolicy=frame-ancestors 'self' cloud.snyssen.be
      - traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011
      - traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.nextcloud.headers.stsPreload=true
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.regex=/.well-known/(card|cal)dav
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.replacement=/remote.php/dav/
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_PASSWORD}
      - REDIS_HOST=redis
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.snyssen.be
      - OVERWRITEPROTOCOL=https
    volumes:
      - /mnt/storage/nextcloud:/var/www/html
      # all below are folders that should not be managed by NextCloud directly but should be accessible as external storage
      - /mnt/storage/TV_shows:/TV_shows
      - /mnt/storage/movies:/movies
      - /mnt/storage/music:/music
      - /mnt/storage/pictures:/pictures
      
  photoprism:
    # Use photoprism/photoprism:preview instead for testing preview builds:
    image: photoprism/photoprism:latest
    container_name: photoprism
    # Only enable automatic restarts once your installation is properly
    # configured as it otherwise may get stuck in a restart loop:
    # https://docs.photoprism.org/getting-started/faq/#why-is-photoprism-getting-stuck-in-a-restart-loop
    # restart: unless-stopped
    networks:
      - internal
      - web
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    labels:
      - traefik.enable=true
      - traefik.http.routers.photoprism.entryPoints=websecure
      - traefik.http.routers.photoprism.rule=Host(`pics.snyssen.be`)
      - traefik.http.routers.photoprism.tls=true
      - traefik.http.routers.photoprism.tls.certresolver=le
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_PASSWORD}
      PHOTOPRISM_HTTP_PORT: 2342                     # Built-in Web server port
      PHOTOPRISM_HTTP_COMPRESSION: "none"            # Improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_DEBUG: "true"                      # Run in debug mode (shows additional log messages)
      PHOTOPRISM_PUBLIC: "false"                     # No authentication required (disables password protection)
      PHOTOPRISM_READONLY: "false"                   # Don't modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # Enables experimental features
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # Disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # Disables Settings in Web UI
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # Disables using TensorFlow for image classification
      PHOTOPRISM_DARKTABLE_PRESETS: "false"          # Enables Darktable presets and disables concurrent RAW conversion
      PHOTOPRISM_DETECT_NSFW: "true"                # Flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # Allow uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # Use MariaDB (or MySQL) instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "mariadb:3306"     # MariaDB database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism"         # MariaDB database user name
      PHOTOPRISM_DATABASE_PASSWORD: "${MARIADB_PASSWORD}"       # MariaDB database user password
      PHOTOPRISM_SITE_URL: "https://pics.snyssen.be"  # Public PhotoPrism URL
      PHOTOPRISM_SITE_TITLE: "PhotoPrism"
      PHOTOPRISM_SITE_CAPTION: "Browse Your Life"
      PHOTOPRISM_SITE_DESCRIPTION: ""
      PHOTOPRISM_SITE_AUTHOR: ""
    volumes:
      # Your photo and video files ([local path]:[container path]):
      - "/mnt/storage/pictures:/photoprism/originals"
      # Multiple folders can be indexed by mounting them as sub-folders of /photoprism/originals:
      # - "/mnt/Family:/photoprism/originals/Family"    # [folder_1]:/photoprism/originals/[folder_1]
      # - "/mnt/Friends:/photoprism/originals/Friends"  # [folder_2]:/photoprism/originals/[folder_2]
      # Mounting an import folder is optional (see docs):
      # - "~/Import:/photoprism/import"
      # Permanent storage for settings, index & sidecar files (DON'T REMOVE):
      - "${DOCKER_DIRECTORY}/photoprism:/photoprism/storage"

  mariadb:
    image: mariadb:10.5
    container_name: mariadb
    restart: unless-stopped
    networks:
      - internal
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=50
    volumes: # Don't remove permanent storage for index database files!
      - "${DOCKER_DIRECTORY}/mariadb:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MYSQL_DATABASE: photoprism
      MYSQL_USER: photoprism
      MYSQL_PASSWORD: ${MARIADB_PASSWORD}
      
  gitlab:
    image: 'gitlab/gitlab-ee:latest'
    restart: unless-stopped
    container_name: gitlab
    hostname: 'git.snyssen.be'
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitlab.entryPoints=websecure
      - traefik.http.routers.gitlab.rule=Host(`git.snyssen.be`)
      - traefik.http.routers.gitlab.tls=true
      - traefik.http.routers.gitlab.tls.certresolver=le
      - traefik.http.services.gitlab.loadBalancer.server.port=80
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://git.snyssen.be'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        nginx['proxy_set_headers'] = {
          "X-Forwarded-Proto" => "https",
          "X-Forwarded-Ssl" => "on"
        }
    ports:
      - '2222:22'
    volumes:
      - '${DOCKER_DIRECTORY}/gitlab/config:/etc/gitlab'
      - '${DOCKER_DIRECTORY}/gitlab/logs:/var/log/gitlab'
      - '${DOCKER_DIRECTORY}/gitlab/data:/var/opt/gitlab'
      
  aria2-ui:
    restart: unless-stopped
    image: wahyd4/aria2-ui:latest
    container_name: aria2
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.aria2.entryPoints=websecure
      - traefik.http.routers.aria2.rule=Host(`dl.snyssen.be`)
      - traefik.http.routers.aria2.tls=true
      - traefik.http.routers.aria2.tls.certresolver=le
    environment:
      - ENABLE_AUTH=true
      - ARIA2_USER=${ARIA2_USER}
      - ARIA2_PWD=${ARIA2_PASSWORD}
      - DOMAIN=http://dl.snyssen.be
      - PUID=0
      - PGID=0
    volumes:
      - /mnt/storage:/data
      - ${DOCKER_DIRECTORY}/aria2/conf:/app/conf # should include files as specified here -> https://github.com/wahyd4/aria2-ariang-docker#supported-volumes

networks:
  web:
    external: true
  internal:
